import kotlin.math.pow

class Generator (
    private val algorithm:String,
    private val baseFrequency:Double,
    private val parameters: List<String>
){
    fun generate(): List<Double>{
        return when (algorithm){
            "edo"-> edoAlgorithm(baseFrequency,12)
            "justPrime"-> justPrimeAlgorithm(baseFrequency,19,"normal")
            "justOdd"-> justOddAlgorithm(baseFrequency,15)
            "Pythagorean"-> pythagoreanAlgorithm(baseFrequency)
            else -> emptyList()
        }
    }

    //ALGORITHMS
    private fun edoAlgorithm(baseFrequency:Double, subdivisions:Int): List<Double>{
        println("EDO called")
        val notesInOctave = mutableListOf<Double>()
        for (i in 0 until subdivisions){
            //IMPORTANT PART LOL
            val newNote = baseFrequency * 2.0.pow(i/subdivisions.toDouble())

            notesInOctave.add(newNote)
        }
        return notesInOctave
    }

    private fun justPrimeAlgorithm(baseFrequency:Double, limit:Int, deepness: String):List<Double>{

        val intervals = justIntervalsList()

        intervals.forEach {
            println("${approximateFractionSimple(it)},")
        }

        return intervals
    }

    private fun justOddAlgorithm(baseFrequency:Double, limit:Int): List<Double> {
        println("Just Odd called")

        val notesInOctave = mutableListOf<Double>()
        notesInOctave.add(baseFrequency)

        //First, we generate the possible factors to be calculated
        val factors = mutableListOf<Double>()
        val lowEndOfFactors = (limit + 1) / 2
        for (i in lowEndOfFactors until 2 * limit) {
            val candidate = (i + 1)
            if (candidate <= limit)
                factors.add(candidate * 1.0)
            else if (candidate % 2 == 0)
                factors.add(candidate * 1.0)
        }

        //We then pick up the useful numerators, and divide them to get the fractions
        val numerators = factors.filter { it > limit }
        numerators.forEach { num ->
            val denominators = factors.filter { factor -> factor > num / 2 && factor < num }
            denominators.forEach { den ->
                val fraction = (num / den)
                val candidate = (baseFrequency*fraction)
                if (candidate !in notesInOctave)
                    notesInOctave.add(candidate)
            }
        }
        notesInOctave.sort()

        println("Added ratios: ")
        notesInOctave.forEach {
            val debugFrac = approximateFractionSimple(it/baseFrequency)
            print("[${debugFrac[0]}/${debugFrac[1]}], ")
        }

        return notesInOctave
    }

    private fun pythagoreanAlgorithm(baseFrequency:Double): List<Double>{
        println("Pythagorean called")
        return emptyList()
    }

    //"DEPENDENCIES"
    private fun eratosthenesSieve(upperLimit: Int): List<Int>{
        //We generate a list with all Ints from 2 up to limit
        val initialIntegers = (2..upperLimit)

        //We create a copy of Initial, which will be filtered
        val primeIntegers = initialIntegers.toMutableList()

        //We implement the Sieve of Eratosthenes to remove unwanted elements of the Primes variable
        for (currentPrime in initialIntegers){
            if (currentPrime*currentPrime>upperLimit)
                break
            primeIntegers.removeIf { possibleComposite ->
                possibleComposite != currentPrime &&
                        possibleComposite%currentPrime == 0
                }
        }
        return primeIntegers
    }

    private fun generateExponentsForPrime(prime: Double, deepness: String): List<Int>{
        var exponents = emptyList<Int>()
        when (deepness){
            "normal" -> {
                exponents = when(prime){
                    2.0 -> (-6..6).toList()
                    3.0, 5.0 -> (-4..4).toList()
                    7.0, 11.0-> (-2..2).toList()
                    else -> (-1..1).toList()
                }
            }
            "deep" -> {
                exponents = when(prime){
                    2.0 -> (-11..11).toList()
                    3.0 -> (-7..7).toList()
                    5.0 -> (-4..4).toList()
                    7.0, 11.0, 13.0, 17.0-> (-2..2).toList()
                    else -> (-1..1).toList()
                }
            }
            else -> exponents = (-2..2).toList()
        }
        return exponents.toList()
    }
    private fun permutateExponents(exponents: MutableList<List<Int>>): List<List<Int>>{
        val permutations = mutableListOf<List<Int>>()
        if (exponents.size==1){
            val currentPrimeExponentList = exponents[0]
            currentPrimeExponentList.forEach { exp ->
                val currentExp = mutableListOf<Int>()
                currentExp.add(exp)
                permutations.add(currentExp)
            }
        } else {
            val head = exponents.first()
            val tail = exponents.drop(1).toMutableList()
            val permutatedTail = permutateExponents(tail)

            //do stuff
            head.forEach { headPrimeExponent ->
                permutatedTail.forEach { otherPrimesExponents ->
                    val newPermutation = mutableListOf<Int>()
                    newPermutation.add(headPrimeExponent)
                    otherPrimesExponents.forEach {
                        newPermutation.add(it)
                    }
                    permutations.add(newPermutation)
                }

            }
        }
        return permutations.toList()
    }

    //OLD exhaustive version of Just Algorithm, impractical for UX
    private fun justPrimeAlgorithmOld(baseFrequency:Double, limit:Int, deepness: String): List<Double>{
        println("Just Prime called")
        val primes: List<Double> = eratosthenesSieve(limit).map { it.toDouble() }
        val exponents = primes.map { prime-> generateExponentsForPrime(prime,deepness) }

        val ratios = mutableListOf<Double>()
        val permutatedExponents = permutateExponents(exponents.toMutableList())

        println("Ratios stored: ")
        permutatedExponents.forEach { exponents ->
            val ratio = primes
                .mapIndexed { index, prime -> prime.pow(exponents[index]) }
                .reduce { accumulated, next -> accumulated*next }
            if (ratio in 1.0..2.0){
                ratios.add(ratio)
            }
        }
        ratios.sort()
        ratios.forEach {
            println("${approximateFractionSimple(it)}")
        }

        println("Number of permutations: ${permutatedExponents.size}")
        println("Number of saved ratios: ${ratios.size}")
        return emptyList()
    }

    //CODE GENERATED BY CHATGPT
    private fun approximateFractionSimple(value: Double, maxDenominator: Int = 1000000): List<Long> {
        var bestNumerator = 1L
        var bestDenominator = 1L
        var bestError = Double.MAX_VALUE

        for (den in 1L..maxDenominator.toLong()) {
            val num = kotlin.math.round(value * den).toLong()
            val approx = num.toDouble() / den
            val error = kotlin.math.abs(value - approx)

            if (error < bestError) {
                bestError = error
                bestNumerator = num
                bestDenominator = den
                if (error < 1e-12) break // optional early exit
            }
        }

        val g = gcd(bestNumerator, bestDenominator)
        return listOf(bestNumerator / g, bestDenominator / g)
    }

    private fun gcd(a: Long, b: Long): Long {
        var x = kotlin.math.abs(a)
        var y = kotlin.math.abs(b)
        while (y != 0L) {
            val temp = x % y
            x = y
            y = temp
        }
        return x
    }
    //CODE BY CHATGPT ENDS HERE

    private fun justIntervalsList(): List<Double> = listOf(
        1.0/1.0, 1732.0/1731.0, 32805.0/32768.0, 129.0/128.0, 126.0/125.0,
        121.0/120.0, 100.0/99.0, 99.0/98.0, 96.0/95.0, 93.0/92.0,
        92.0/91.0, 91.0/90.0, 88.0/87.0, 85.0/84.0, 81.0/80.0,
        78.0/77.0, 77.0/76.0, 76.0/75.0, 531441.0/524288.0, 74.0/73.0,
        70.0/69.0, 69.0/68.0, 66.0/65.0, 65.0/64.0, 64.0/63.0,
        63.0/62.0, 62.0/61.0, 61.0/60.0, 60.0/59.0, 59.0/58.0,
        58.0/57.0, 57.0/56.0, 56.0/55.0, 55.0/54.0, 54.0/53.0,
        53.0/52.0, 52.0/51.0, 51.0/50.0, 50.0/49.0, 49.0/48.0,
        48.0/47.0, 95.0/93.0, 47.0/46.0, 93.0/91.0, 46.0/45.0,
        45.0/44.0, 44.0/43.0, 131.0/128.0, 87.0/85.0, 43.0/42.0,
        128.0/125.0, 42.0/41.0, 41.0/40.0, 525.0/512.0, 40.0/39.0,
        39.0/38.0, 77.0/75.0, 38.0/37.0, 37.0/36.0, 36.0/35.0,
        250.0/243.0, 35.0/34.0, 34.0/33.0, 33.0/32.0, 65.0/63.0,
        32.0/31.0, 95.0/92.0, 63.0/61.0, 125.0/121.0, 31.0/30.0,
        61.0/59.0, 91.0/88.0, 30.0/29.0, 59.0/57.0, 88.0/85.0,
        29.0/28.0, 57.0/55.0, 28.0/27.0, 55.0/53.0, 27.0/26.0,
        80.0/77.0, 133.0/128.0, 53.0/51.0, 26.0/25.0, 51.0/49.0,
        126.0/121.0, 25.0/24.0, 49.0/47.0, 24.0/23.0, 95.0/91.0,
        47.0/45.0, 117.0/112.0, 23.0/22.0, 91.0/87.0, 68.0/65.0,
        45.0/43.0, 67.0/64.0, 22.0/21.0, 65.0/62.0, 43.0/41.0,
        64.0/61.0, 85.0/81.0, 21.0/20.0, 62.0/59.0, 41.0/39.0,
        61.0/58.0, 81.0/77.0, 20.0/19.0, 256.0/243.0, 59.0/56.0,
        39.0/37.0, 58.0/55.0, 135.0/128.0, 96.0/91.0, 19.0/18.0,
        56.0/53.0, 93.0/88.0, 37.0/35.0, 92.0/87.0, 55.0/52.0,
        128.0/121.0, 18.0/17.0, 89.0/84.0, 53.0/50.0, 35.0/33.0,
        52.0/49.0, 69.0/65.0, 86.0/81.0, 17.0/16.0, 50.0/47.0,
        33.0/31.0, 49.0/46.0, 81.0/76.0, 16.0/15.0, 63.0/59.0,
        47.0/44.0, 31.0/29.0, 77.0/72.0, 46.0/43.0, 61.0/57.0,
        137.0/128.0, 91.0/85.0, 15.0/14.0, 59.0/55.0, 44.0/41.0,
        29.0/27.0, 43.0/40.0, 57.0/53.0, 14.0/13.0, 69.0/64.0,
        55.0/51.0, 41.0/38.0, 68.0/63.0, 95.0/88.0, 27.0/25.0,
        121.0/112.0, 40.0/37.0, 53.0/49.0, 92.0/85.0, 13.0/12.0,
        64.0/59.0, 51.0/47.0, 38.0/35.0, 139.0/128.0, 63.0/58.0,
        88.0/81.0, 25.0/23.0, 87.0/80.0, 62.0/57.0, 37.0/34.0,
        135.0/124.0, 49.0/45.0, 61.0/56.0, 85.0/78.0, 12.0/11.0,
        95.0/87.0, 59.0/54.0, 47.0/43.0, 35.0/32.0, 93.0/85.0,
        58.0/53.0, 23.0/21.0, 57.0/52.0, 34.0/31.0, 800.0/729.0,
        45.0/41.0, 56.0/51.0, 11.0/10.0, 76.0/69.0, 141.0/128.0,
        54.0/49.0, 43.0/39.0, 75.0/68.0, 32.0/29.0, 85.0/77.0,
        53.0/48.0, 21.0/19.0, 52.0/47.0, 31.0/28.0, 567.0/512.0,
        72.0/65.0, 41.0/37.0, 51.0/46.0, 61.0/55.0, 71.0/64.0,
        10.0/9.0, 69.0/62.0, 59.0/53.0, 49.0/44.0, 39.0/35.0,
        29.0/26.0, 77.0/69.0, 125.0/112.0, 48.0/43.0, 143.0/128.0,
        19.0/17.0, 85.0/76.0, 160.0/143.0, 47.0/42.0, 28.0/25.0,
        121.0/108.0, 65.0/58.0, 37.0/33.0, 46.0/41.0, 55.0/49.0,
        64.0/57.0, 91.0/81.0, 9.0/8.0, 62.0/55.0, 53.0/47.0,
        44.0/39.0, 35.0/31.0, 96.0/85.0, 61.0/54.0, 87.0/77.0,
        26.0/23.0, 95.0/84.0, 112.0/99.0, 43.0/38.0, 60.0/53.0,
        77.0/68.0, 145.0/128.0, 17.0/15.0, 59.0/52.0, 42.0/37.0,
        92.0/81.0, 25.0/22.0, 58.0/51.0, 91.0/80.0, 256.0/225.0,
        33.0/29.0, 41.0/36.0, 729.0/640.0, 49.0/43.0, 57.0/50.0,
        65.0/57.0, 73.0/64.0, 8.0/7.0, 87.0/76.0, 63.0/55.0,
        55.0/48.0, 47.0/41.0, 39.0/34.0, 225.0/196.0, 31.0/27.0,
        147.0/128.0, 54.0/47.0, 169.0/147.0, 23.0/20.0, 61.0/53.0,
        2187.0/1900.0, 38.0/33.0, 144.0/125.0, 53.0/46.0, 121.0/105.0,
        15.0/13.0, 52.0/45.0, 37.0/32.0, 59.0/51.0, 81.0/70.0,
        125.0/108.0, 22.0/19.0, 51.0/44.0, 80.0/69.0, 196.0/169.0,
        29.0/25.0, 65.0/56.0, 36.0/31.0, 43.0/37.0, 93.0/80.0,
        50.0/43.0, 57.0/49.0, 64.0/55.0, 149.0/128.0, 7.0/6.0,
        90.0/77.0, 76.0/65.0, 62.0/53.0, 55.0/47.0, 48.0/41.0,
        41.0/35.0, 75.0/64.0, 34.0/29.0, 95.0/81.0, 61.0/52.0,
        88.0/75.0, 27.0/23.0, 47.0/40.0, 20.0/17.0, 53.0/45.0,
        33.0/28.0, 46.0/39.0, 151.0/128.0, 59.0/50.0, 85.0/72.0,
        13.0/11.0, 58.0/49.0, 45.0/38.0, 77.0/65.0, 32.0/27.0,
        51.0/43.0, 19.0/16.0, 63.0/53.0, 44.0/37.0, 69.0/58.0,
        25.0/21.0, 81.0/68.0, 56.0/47.0, 31.0/26.0, 68.0/57.0,
        105.0/88.0, 37.0/31.0, 43.0/36.0, 92.0/77.0, 49.0/41.0,
        153.0/128.0, 55.0/46.0, 61.0/51.0, 91.0/76.0, 6.0/5.0,
        77.0/64.0, 65.0/54.0, 59.0/49.0, 53.0/44.0, 47.0/39.0,
        41.0/34.0, 76.0/63.0, 35.0/29.0, 64.0/53.0, 93.0/77.0,
        29.0/24.0, 52.0/43.0, 75.0/62.0, 98.0/81.0, 121.0/100.0,
        23.0/19.0, 155.0/128.0, 63.0/52.0, 40.0/33.0, 57.0/47.0,
        91.0/75.0, 17.0/14.0, 243.0/200.0, 62.0/51.0, 45.0/37.0,
        28.0/23.0, 95.0/78.0, 39.0/32.0, 128.0/105.0, 8000.0/6561.0,
        50.0/41.0, 61.0/50.0, 11.0/9.0, 93.0/76.0, 60.0/49.0,
        49.0/40.0, 38.0/31.0, 157.0/128.0, 92.0/75.0, 27.0/22.0,
        43.0/35.0, 59.0/48.0, 16.0/13.0, 85.0/69.0, 69.0/56.0,
        53.0/43.0, 37.0/30.0, 95.0/77.0, 58.0/47.0, 79.0/64.0,
        100.0/81.0, 121.0/98.0, 21.0/17.0, 68.0/55.0, 47.0/38.0,
        99.0/80.0, 26.0/21.0, 57.0/46.0, 31.0/25.0, 36.0/29.0,
        159.0/128.0, 41.0/33.0, 87.0/70.0, 46.0/37.0, 51.0/41.0,
        56.0/45.0, 61.0/49.0, 81.0/65.0, 96.0/77.0, 8192.0/6561.0,
        5.0/4.0, 69.0/55.0, 64.0/51.0, 59.0/47.0, 54.0/43.0,
        49.0/39.0, 44.0/35.0, 161.0/128.0, 39.0/31.0, 34.0/27.0,
        63.0/50.0, 121.0/96.0, 29.0/23.0, 53.0/42.0, 125.0/99.0,
        24.0/19.0, 91.0/72.0, 512.0/405.0, 43.0/34.0, 62.0/49.0,
        81.0/64.0, 19.0/15.0, 52.0/41.0, 33.0/26.0, 80.0/63.0,
        47.0/37.0, 61.0/48.0, 14.0/11.0, 163.0/128.0, 65.0/51.0,
        51.0/40.0, 88.0/69.0, 125.0/98.0, 37.0/29.0, 60.0/47.0,
        23.0/18.0, 55.0/43.0, 87.0/68.0, 32.0/25.0, 41.0/32.0,
        50.0/39.0, 59.0/46.0, 77.0/60.0, 9.0/7.0, 85.0/66.0,
        58.0/45.0, 165.0/128.0, 49.0/38.0, 40.0/31.0, 31.0/24.0,
        1323.0/1024.0, 84.0/65.0, 53.0/41.0, 128.0/99.0, 22.0/17.0,
        57.0/44.0, 162.0/125.0, 35.0/27.0, 83.0/64.0, 48.0/37.0,
        61.0/47.0, 100.0/77.0, 13.0/10.0, 125.0/96.0, 56.0/43.0,
        43.0/33.0, 30.0/23.0, 167.0/128.0, 47.0/36.0, 64.0/49.0,
        98.0/75.0, 17.0/13.0, 89.0/68.0, 72.0/55.0, 55.0/42.0,
        38.0/29.0, 59.0/45.0, 21.0/16.0, 46.0/35.0, 25.0/19.0,
        320.0/243.0, 54.0/41.0, 29.0/22.0, 675.0/512.0, 91.0/69.0,
        62.0/47.0, 95.0/72.0, 33.0/25.0, 169.0/128.0, 37.0/28.0,
        41.0/31.0, 45.0/34.0, 49.0/37.0, 53.0/40.0, 57.0/43.0,
        61.0/46.0, 65.0/49.0, 69.0/52.0, 85.0/64.0, 93.0/70.0,
        4.0/3.0, 171.0/128.0, 91.0/68.0, 87.0/65.0, 75.0/56.0,
        63.0/47.0, 59.0/44.0, 55.0/41.0, 51.0/38.0, 47.0/35.0,
        43.0/32.0, 121.0/90.0, 39.0/29.0, 35.0/26.0, 66.0/49.0,
        31.0/23.0, 58.0/43.0, 85.0/63.0, 27.0/20.0, 50.0/37.0,
        173.0/128.0, 23.0/17.0, 88.0/65.0, 65.0/48.0, 42.0/31.0,
        61.0/45.0, 19.0/14.0, 110.0/81.0, 53.0/39.0, 87.0/64.0,
        34.0/25.0, 49.0/36.0, 64.0/47.0, 15.0/11.0, 512.0/375.0,
        56.0/41.0, 41.0/30.0, 175.0/128.0, 93.0/68.0, 26.0/19.0,
        63.0/46.0, 37.0/27.0, 85.0/62.0, 48.0/35.0, 1000.0/729.0,
        59.0/43.0, 11.0/8.0, 95.0/69.0, 62.0/45.0, 51.0/37.0,
        91.0/66.0, 40.0/29.0, 69.0/50.0, 29.0/21.0, 76.0/55.0,
        47.0/34.0, 112.0/81.0, 177.0/128.0, 18.0/13.0, 61.0/44.0,
        43.0/31.0, 68.0/49.0, 25.0/18.0, 57.0/41.0, 89.0/64.0,
        32.0/23.0, 39.0/28.0, 46.0/33.0, 53.0/38.0, 60.0/43.0,
        88.0/63.0, 95.0/68.0, 179.0/128.0, 7.0/5.0, 108.0/77.0,
        87.0/62.0, 1024.0/729.0, 59.0/42.0, 52.0/37.0, 45.0/32.0,
        38.0/27.0, 69.0/49.0, 31.0/22.0, 55.0/39.0, 24.0/17.0,
        65.0/46.0, 41.0/29.0, 181.0/128.0, 99.0/70.0, 58.0/41.0,
        92.0/65.0, 17.0/12.0, 78.0/55.0, 61.0/43.0, 44.0/31.0,
        125.0/88.0, 27.0/19.0, 91.0/64.0, 64.0/45.0, 37.0/26.0,
        729.0/512.0, 47.0/33.0, 57.0/40.0, 77.0/54.0, 10.0/7.0,
        183.0/128.0, 93.0/65.0, 63.0/44.0, 53.0/37.0, 43.0/30.0,
        33.0/23.0, 56.0/39.0, 23.0/16.0, 59.0/41.0, 95.0/66.0,
        36.0/25.0, 121.0/84.0, 49.0/34.0, 62.0/43.0, 13.0/9.0,
        185.0/128.0, 81.0/56.0, 55.0/38.0, 42.0/29.0, 29.0/20.0,
        45.0/31.0, 61.0/42.0, 93.0/64.0, 16.0/11.0, 51.0/35.0,
        729.0/500.0, 35.0/24.0, 54.0/37.0, 92.0/63.0, 187.0/128.0,
        19.0/13.0, 60.0/41.0, 41.0/28.0, 375.0/256.0, 63.0/43.0,
        85.0/58.0, 22.0/15.0, 91.0/62.0, 47.0/32.0, 72.0/49.0,
        25.0/17.0, 53.0/36.0, 81.0/55.0, 28.0/19.0, 59.0/40.0,
        31.0/21.0, 189.0/128.0, 96.0/65.0, 65.0/44.0, 34.0/23.0,
        37.0/25.0, 40.0/27.0, 43.0/29.0, 46.0/31.0, 95.0/64.0,
        49.0/33.0, 52.0/35.0, 55.0/37.0, 58.0/39.0, 61.0/41.0,
        125.0/84.0, 64.0/43.0, 76.0/51.0, 85.0/57.0, 191.0/128.0,
        112.0/75.0, 121.0/81.0, 3.0/2.0, 193.0/128.0, 95.0/63.0,
        68.0/45.0, 62.0/41.0, 121.0/80.0, 59.0/39.0, 56.0/37.0,
        53.0/35.0, 50.0/33.0, 97.0/64.0, 47.0/31.0, 91.0/60.0,
        1024.0/675.0, 44.0/29.0, 85.0/56.0, 41.0/27.0, 243.0/160.0,
        38.0/25.0, 35.0/23.0, 195.0/128.0, 32.0/21.0, 61.0/40.0,
        29.0/19.0, 84.0/55.0, 55.0/36.0, 26.0/17.0, 75.0/49.0,
        49.0/32.0, 95.0/62.0, 87.0/55.0, 23.0/15.0, 43.0/28.0,
        192.0/125.0, 63.0/41.0, 20.0/13.0, 197.0/128.0, 77.0/50.0,
        57.0/37.0, 37.0/24.0, 54.0/35.0, 125.0/81.0, 17.0/11.0,
        99.0/64.0, 65.0/42.0, 48.0/31.0, 31.0/20.0, 76.0/49.0,
        45.0/29.0, 59.0/38.0, 87.0/56.0, 199.0/128.0, 14.0/9.0,
        120.0/77.0, 53.0/34.0, 39.0/25.0, 64.0/41.0, 25.0/16.0,
        61.0/39.0, 36.0/23.0, 47.0/30.0, 58.0/37.0, 69.0/44.0,
        91.0/58.0, 201.0/128.0, 11.0/7.0, 85.0/54.0, 63.0/40.0,
        52.0/33.0, 41.0/26.0, 101.0/64.0, 30.0/19.0, 128.0/81.0,
        49.0/31.0, 405.0/256.0, 19.0/12.0, 203.0/128.0, 46.0/29.0,
        100.0/63.0, 27.0/17.0, 62.0/39.0, 35.0/22.0, 78.0/49.0,
        43.0/27.0, 51.0/32.0, 59.0/37.0, 91.0/57.0, 8.0/5.0,
        205.0/128.0, 6561.0/4096.0, 93.0/58.0, 77.0/48.0, 61.0/38.0,
        53.0/33.0, 45.0/28.0, 37.0/23.0, 103.0/64.0, 29.0/18.0,
        50.0/31.0, 121.0/75.0, 92.0/57.0, 21.0/13.0, 207.0/128.0,
        55.0/34.0, 34.0/21.0, 81.0/50.0, 47.0/29.0, 60.0/37.0,
        125.0/77.0, 13.0/8.0, 57.0/35.0, 44.0/27.0, 31.0/19.0,
        80.0/49.0, 209.0/128.0, 49.0/30.0, 85.0/52.0, 18.0/11.0,
        95.0/58.0, 59.0/36.0, 41.0/25.0, 105.0/64.0, 64.0/39.0,
        23.0/14.0, 51.0/31.0, 400.0/243.0, 28.0/17.0, 211.0/128.0,
        61.0/37.0, 33.0/20.0, 38.0/23.0, 81.0/49.0, 43.0/26.0,
        91.0/55.0, 48.0/29.0, 53.0/32.0, 58.0/35.0, 63.0/38.0,
        128.0/77.0, 213.0/128.0, 5.0/3.0, 107.0/64.0, 92.0/55.0,
        87.0/52.0, 62.0/37.0, 57.0/34.0, 52.0/31.0, 47.0/28.0,
        215.0/128.0, 42.0/25.0, 121.0/72.0, 37.0/22.0, 32.0/19.0,
        91.0/54.0, 59.0/35.0, 27.0/16.0, 76.0/45.0, 49.0/29.0,
        22.0/13.0, 61.0/36.0, 217.0/128.0, 39.0/23.0, 95.0/56.0,
        56.0/33.0, 17.0/10.0, 63.0/37.0, 109.0/64.0, 46.0/27.0,
        75.0/44.0, 29.0/17.0, 128.0/75.0, 41.0/24.0, 53.0/31.0,
        65.0/38.0, 219.0/128.0, 77.0/45.0, 12.0/7.0, 55.0/32.0,
        43.0/25.0, 31.0/18.0, 441.0/256.0, 50.0/29.0, 69.0/40.0,
        221.0/128.0, 19.0/11.0, 216.0/125.0, 121.0/70.0, 64.0/37.0,
        45.0/26.0, 26.0/15.0, 111.0/64.0, 85.0/49.0, 59.0/34.0,
        125.0/72.0, 33.0/19.0, 40.0/23.0, 87.0/50.0, 47.0/27.0,
        54.0/31.0, 223.0/128.0, 61.0/35.0, 68.0/39.0, 96.0/55.0,
        110.0/63.0, 7.0/4.0, 58.0/33.0, 225.0/128.0, 51.0/29.0,
        95.0/54.0, 44.0/25.0, 37.0/21.0, 30.0/17.0, 113.0/64.0,
        53.0/30.0, 99.0/56.0, 23.0/13.0, 85.0/48.0, 62.0/35.0,
        39.0/22.0, 227.0/128.0, 55.0/31.0, 87.0/49.0, 16.0/9.0,
        57.0/32.0, 98.0/55.0, 41.0/23.0, 91.0/51.0, 25.0/14.0,
        59.0/33.0, 229.0/128.0, 34.0/19.0, 43.0/24.0, 52.0/29.0,
        61.0/34.0, 88.0/49.0, 115.0/64.0, 9.0/5.0, 92.0/51.0,
        231.0/128.0, 65.0/36.0, 56.0/31.0, 47.0/26.0, 38.0/21.0,
        29.0/16.0, 49.0/27.0, 69.0/38.0, 20.0/11.0, 91.0/50.0,
        233.0/128.0, 51.0/28.0, 729.0/400.0, 31.0/17.0, 42.0/23.0,
        95.0/52.0, 53.0/29.0, 117.0/64.0, 64.0/35.0, 4000.0/2187.0,
        11.0/6.0, 235.0/128.0, 90.0/49.0, 57.0/31.0, 46.0/25.0,
        81.0/44.0, 35.0/19.0, 59.0/32.0, 24.0/13.0, 85.0/46.0,
        61.0/33.0, 37.0/20.0, 237.0/128.0, 50.0/27.0, 63.0/34.0,
        13.0/7.0, 119.0/64.0, 54.0/29.0, 95.0/51.0, 41.0/22.0,
        28.0/15.0, 239.0/128.0, 43.0/23.0, 58.0/31.0, 15.0/8.0,
        92.0/49.0, 62.0/33.0, 47.0/25.0, 32.0/17.0, 241.0/128.0,
        49.0/26.0, 66.0/35.0, 17.0/9.0, 121.0/64.0, 87.0/46.0,
        53.0/28.0, 125.0/66.0, 36.0/19.0, 91.0/48.0, 256.0/135.0,
        55.0/29.0, 243.0/128.0, 19.0/10.0, 59.0/31.0, 40.0/21.0,
        61.0/32.0, 21.0/11.0, 65.0/34.0, 44.0/23.0, 245.0/128.0,
        23.0/12.0, 48.0/25.0, 121.0/63.0, 123.0/64.0, 25.0/13.0,
        77.0/40.0, 52.0/27.0, 27.0/14.0, 247.0/128.0, 56.0/29.0,
        85.0/44.0, 29.0/15.0, 60.0/31.0, 31.0/16.0, 95.0/49.0,
        64.0/33.0, 33.0/17.0, 68.0/35.0, 243.0/125.0, 35.0/18.0,
        249.0/128.0, 37.0/19.0, 76.0/39.0, 39.0/20.0, 41.0/21.0,
        125.0/64.0, 43.0/22.0, 88.0/45.0, 45.0/23.0, 47.0/24.0,
        96.0/49.0, 49.0/25.0, 251.0/128.0, 51.0/26.0, 53.0/27.0,
        108.0/55.0, 55.0/28.0, 57.0/29.0, 59.0/30.0, 61.0/31.0,
        63.0/32.0, 65.0/33.0, 69.0/35.0, 160.0/81.0, 253.0/128.0,
        87.0/44.0, 91.0/46.0, 95.0/48.0, 99.0/50.0, 125.0/63.0,
        127.0/64.0, 255.0/128.0, 2.0/1.0
    )
}